name: Lambda Deployment Pipeline
 
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
 
env:
  AWS_REGION: us-east-1
  LAMBDA_STACK_NAME: my-lambda-stack
  ARTIFACT_NAME: lambda-artifact
  ARTIFACT_VERSION: 1.0.${{ github.run_number }}
  JFROG_REPO: my-jfrog-repo
 
jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ./src
 
      - name: Install AWS SAM CLI
        uses: aws-actions/setup-sam@v2
 
      - name: SAM Build
        run: sam build 
 
      - name: Setup SonarQube Scanner
        uses: SonarSource/sonarqube-scanner-action@master
        with:
          version: '4.6'
 
      - name: SonarQube Scan
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
 
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
 
      - name: SAM Package
        if: steps.sonarqube-quality-gate.outputs.status == 'success'
        run: sam package --output-template-file packaged.yaml --s3-bucket ${{ secrets.AWS_S3_BUCKET }}
 
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: '2'
 
      - name: Configure JFrog
        run: |
          jfrog rt c ${{ secrets.JFROG_SERVER_ID }} \
            --url=${{ secrets.JFROG_URL }} \
            --user=${{ secrets.JFROG_USER }} \
            --password=${{ secrets.JFROG_API_KEY }}
          jfrog rt use ${{ secrets.JFROG_SERVER_ID }}

      - name: Publish to JFrog Artifactory
        if: steps.sonarqube-quality-gate.outputs.status == 'success'
        run: |
          jfrog rt upload "./.aws-sam/build/**/*.zip" \
            "$JFROG_REPO/$ARTIFACT_NAME/$ARTIFACT_VERSION/" \
            --flat=false

      - name: Trigger Xray Scan
        if: steps.sonarqube-quality-gate.outputs.status == 'success'
        run: |
          jfrog rt bs $ARTIFACT_NAME $ARTIFACT_VERSION
          jfrog rt bce $ARTIFACT_NAME $ARTIFACT_VERSION
          jfrog rt bag $ARTIFACT_NAME $ARTIFACT_VERSION
          jfrog rt bad $ARTIFACT_NAME $ARTIFACT_VERSION \
            --repo="$JFROG_REPO"
 
  deploy:
    needs: build-test-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install AWS SAM CLI
        uses: aws-actions/setup-sam@v2
 
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: '2'

      - name: Configure JFrog
        run: |
          jfrog rt c ${{ secrets.JFROG_SERVER_ID }} \
            --url=${{ secrets.JFROG_URL }} \
            --user=${{ secrets.JFROG_USER }} \
            --password=${{ secrets.JFROG_API_KEY }}
          jfrog rt use ${{ secrets.JFROG_SERVER_ID }}
 
      - name: Download Artifact from JFrog
        run: |
          jfrog rt download \
            "$JFROG_REPO/$ARTIFACT_NAME/$ARTIFACT_VERSION/" \
            ./downloaded-artifacts/ \
            --flat=false
 
      - name: SAM Deploy
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name $LAMBDA_STACK_NAME \
            --capabilities CAPABILITY_IAM \
            --region $AWS_REGION \
            --no-fail-on-empty-changeset

